# ============================================================================
# TRELLO ‚Äì Trello Card Seeder (g√©n√©rique, compatible PowerShell ISE 5.1)
# - Demande : KEY, TOKEN, Board (URL/shortLink), Nom de liste, Nom du label, Couleur (menu).
# - GET corrig√© : key/token en query string (√©vite 404).
# - G√®re le cas Trello 400 sur /labels si la couleur existe d√©j√† sur le board :
#     * cherche par nom, puis par couleur
#     * si couleur existante => tentative de renommage ; sinon r√©utilise
#     * fallback : cr√©e label sans couleur si tout √©choue
# - Cr√©e chaque carte + description + checklist "DoD", applique le label si fourni.
# - NOUVEAU : Sauvegarde l'URL du board et s√©lection interactive des listes/labels
# ============================================================================

# Encodage : ISE n'a pas de vrai ConsoleHost -> prot√®ge l'appel
try { if ($host.Name -eq 'ConsoleHost') { [Console]::OutputEncoding = [Text.UTF8Encoding]::UTF8 } } catch {}

[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12

# -------------------- Gestion des identifiants Trello --------------------
# Utiliser le r√©pertoire courant si $PSScriptRoot est vide
$ScriptDir = if ([string]::IsNullOrWhiteSpace($PSScriptRoot)) { Get-Location } else { $PSScriptRoot }
$ConfigFile = Join-Path $ScriptDir "trello-config.json"

function Load-TrelloConfig {
  Write-Host "Recherche du fichier de configuration : $ConfigFile" -ForegroundColor Gray
  if (Test-Path $ConfigFile) {
    Write-Host "Fichier de configuration trouv√©" -ForegroundColor Green
    try {
      $config = Get-Content $ConfigFile | ConvertFrom-Json
      Write-Host "Configuration charg√©e avec succ√®s" -ForegroundColor Green
      return $config
    } catch {
      Write-Warning "Fichier de configuration corrompu, sera recr√©√©. Erreur: $($_.Exception.Message)"
    }
  } else {
    Write-Host "Fichier de configuration non trouv√©" -ForegroundColor Yellow
  }
  return $null
}

function Save-TrelloConfig {
  param([string]$Key, [string]$Token, [string]$BoardUrl)
  $config = @{
    Key = $Key
    Token = $Token
    BoardUrl = $BoardUrl
    LastUpdated = (Get-Date).ToString("yyyy-MM-dd HH:mm:ss")
  }
  $config | ConvertTo-Json | Set-Content $ConfigFile -Encoding UTF8
  Write-Host "‚úÖ Configuration Trello sauvegard√©e localement" -ForegroundColor Green
}

function Load-BoardConfig {
  param([string]$BoardUrl)
  $configFile = Join-Path $ScriptDir "board-config-$BoardUrl.json"
  if (Test-Path $configFile) {
    try {
      $config = Get-Content $configFile | ConvertFrom-Json
      Write-Host "Configuration du board trouv√©e : $BoardUrl" -ForegroundColor Green
      return $config
    } catch {
      Write-Warning "Fichier de configuration du board corrompu : $configFile. Erreur: $($_.Exception.Message)"
    }
  } else {
    Write-Host "Aucune configuration du board trouv√©e pour $BoardUrl" -ForegroundColor Yellow
  }
  return $null
}

function Save-BoardConfig {
  param([string]$BoardUrl, [string]$ListName, [string]$LabelName, [string]$LabelColor)
  $config = @{
    ListName = $ListName
    LabelName = $LabelName
    LabelColor = $LabelColor
  }
  $config | ConvertTo-Json | Set-Content (Join-Path $ScriptDir "board-config-$BoardUrl.json") -Encoding UTF8
  Write-Host "‚úÖ Configuration du board sauvegard√©e localement : $BoardUrl" -ForegroundColor Green
}

Write-Host "=== CONFIGURATION TRELLO ===" -ForegroundColor Cyan
Write-Host "Pour obtenir votre KEY et TOKEN, allez sur : https://trello.com/app-key" -ForegroundColor Yellow

# Charger la configuration existante
$savedConfig = Load-TrelloConfig
$Key = $null
$Token = $null

if ($savedConfig -and $savedConfig.Key -and $savedConfig.Token) {
  Write-Host "Configuration trouv√©e du $($savedConfig.LastUpdated)" -ForegroundColor Green
  Write-Host "Options :" -ForegroundColor Cyan
  Write-Host "  [O] Utiliser les identifiants sauvegard√©s" -ForegroundColor White
  Write-Host "  [N] Saisir de nouveaux identifiants" -ForegroundColor White
  Write-Host "  [M] Modifier la configuration existante" -ForegroundColor White
  
  $choice = Read-Host "Votre choix (O/n/m)"
  
  if ($choice -eq "" -or $choice -eq "O" -or $choice -eq "o") {
    $Key = $savedConfig.Key
    $Token = $savedConfig.Token
    Write-Host "‚úÖ Utilisation des identifiants sauvegard√©s" -ForegroundColor Green
  } elseif ($choice -eq "M" -or $choice -eq "m") {
    Write-Host "Modification de la configuration..." -ForegroundColor Yellow
    $Key = Read-Host "Nouvelle Trello API KEY"
    $Token = Read-Host "Nouveau Trello TOKEN"
    $BoardUrl = Read-Host "URL du board Trello (ex: https://trello.com/b/XXXXX)"
    Save-TrelloConfig -Key $Key -Token $Token -BoardUrl $BoardUrl
  }
  # Si choix "N", on continue vers la saisie des identifiants
} else {
  Write-Host "Aucune configuration sauvegard√©e trouv√©e." -ForegroundColor Yellow
}

# Si pas de configuration sauvegard√©e ou refus√©e, demander les identifiants
if (-not $Key -or -not $Token) {
  $Key = Read-Host "Trello API KEY (laisser vide pour utiliser `$env:TRELLO_KEY)"
  if ([string]::IsNullOrWhiteSpace($Key)) { $Key = $env:TRELLO_KEY }
  if ([string]::IsNullOrWhiteSpace($Key)) { throw "Aucune KEY fournie." }

  $Token = Read-Host "Trello TOKEN (laisser vide pour utiliser `$env:TRELLO_TOKEN)"
  if ([string]::IsNullOrWhiteSpace($Token)) { $Token = $env:TRELLO_TOKEN }
  if ([string]::IsNullOrWhiteSpace($Token)) { throw "Aucun TOKEN fourni." }

  # Sauvegarder les nouveaux identifiants
  $saveConfig = Read-Host "Sauvegarder ces identifiants pour la prochaine fois ? (O/n)"
  if ($saveConfig -eq "" -or $saveConfig -eq "O" -or $saveConfig -eq "o") {
    $BoardUrl = Read-Host "URL du board Trello (ex: https://trello.com/b/XXXXX)"
    Save-TrelloConfig -Key $Key -Token $Token -BoardUrl $BoardUrl
  }
}

# Board : URL ou shortLink (apr√®s /b/)
if ($savedConfig -and $savedConfig.BoardUrl) {
  Write-Host "Board sauvegard√© : $($savedConfig.BoardUrl)" -ForegroundColor Green
  $useSavedBoard = Read-Host "Utiliser ce board ? (O/n)"
  if ($useSavedBoard -eq "" -or $useSavedBoard -eq "O" -or $useSavedBoard -eq "o") {
    $BoardInput = $savedConfig.BoardUrl
  } else {
    $BoardInput = Read-Host "URL du board Trello (ou juste le shortLink apr√®s /b/)"
  }
} else {
  $BoardInput = Read-Host "URL du board Trello (ou juste le shortLink apr√®s /b/)"
}

if ($BoardInput -match 'trello\.com/b/([^/]+)') { 
  $BoardId = $Matches[1] 
  $BoardUrl = $BoardInput
} else { 
  $BoardId = $BoardInput.Trim() 
  $BoardUrl = "https://trello.com/b/$BoardId"
}
if ([string]::IsNullOrWhiteSpace($BoardId)) { throw "BoardId manquant." }

# -------------------- Helpers --------------------
function Join-QueryString {
  param([hashtable]$Params)
  ($Params.GetEnumerator() | ForEach-Object {
    [System.Uri]::EscapeDataString($_.Key) + "=" + [System.Uri]::EscapeDataString([string]$_.Value)
  }) -join "&"
}

function Select-ListFromBoard {
  param([string]$BoardId)
  Write-Host "`nüìã R√©cup√©ration des listes disponibles..." -ForegroundColor Cyan
  try {
    $baseUrl = "https://api.trello.com/1/boards/$BoardId/lists"
    $queryParams = "fields=name,id,pos"
    $fullUrl = "$baseUrl`?$queryParams"
    $lists = Invoke-Trello $fullUrl
    if ($lists.Count -eq 0) {
      Write-Host "Aucune liste trouv√©e sur ce board" -ForegroundColor Yellow
      return $null
    }
    
    Write-Host "`nListes disponibles sur le board :" -ForegroundColor Cyan
    for ($i = 0; $i -lt $lists.Count; $i++) {
      $list = $lists[$i]
      Write-Host ("[{0}] {1}" -f ($i + 1), $list.name) -ForegroundColor White
    }
    
    $choice = Read-Host "`nS√©lectionnez le num√©ro de la liste (1-$($lists.Count))"
    $index = [int]$choice - 1
    
    if ($index -ge 0 -and $index -lt $lists.Count) {
      $selectedList = $lists[$index]
      Write-Host ("‚úÖ Liste s√©lectionn√©e : {0}" -f $selectedList.name) -ForegroundColor Green
      return $selectedList
    } else {
      throw "S√©lection invalide"
    }
  } catch {
    Write-Warning "Erreur lors de la r√©cup√©ration des listes : $($_.Exception.Message)"
    return $null
  }
}

function Select-LabelFromBoard {
  param([string]$BoardId)
  Write-Host "`nüè∑Ô∏è R√©cup√©ration des labels disponibles..." -ForegroundColor Cyan
  try {
    $baseUrl = "https://api.trello.com/1/boards/$BoardId/labels"
    $limit = "limit=1000"
    $fields = "fields=id,name,color"
    $queryParams = "$limit" + "&" + "$fields"
    $fullUrl = "$baseUrl`?$queryParams"
    $labels = Invoke-Trello $fullUrl
    if ($labels.Count -eq 0) {
      Write-Host "Aucun label trouv√© sur ce board" -ForegroundColor Yellow
      return $null
    }
    
    Write-Host "`nLabels disponibles sur le board :" -ForegroundColor Cyan
    Write-Host "[0] Aucun label" -ForegroundColor White
    for ($i = 0; $i -lt $labels.Count; $i++) {
      $label = $labels[$i]
      $name = if ($label.name) { "'$($label.name)'" } else { "Sans nom" }
      $color = if ($label.color) { $label.color } else { "Aucune" }
      Write-Host ("[{0}] {1} (couleur: {2})" -f ($i + 1), $name, $color) -ForegroundColor White
    }
    
    $choice = Read-Host "`nS√©lectionnez le num√©ro du label (0-$($labels.Count))"
    $index = [int]$choice - 1
    
    if ($index -eq -1) {
      Write-Host "‚úÖ Aucun label s√©lectionn√©" -ForegroundColor Green
      return $null
    } elseif ($index -ge 0 -and $index -lt $labels.Count) {
      $selectedLabel = $labels[$index]
      Write-Host ("‚úÖ Label s√©lectionn√© : {0} (couleur: {1})" -f $selectedLabel.name, $selectedLabel.color) -ForegroundColor Green
      return $selectedLabel
    } else {
      throw "S√©lection invalide"
    }
  } catch {
    Write-Warning "Erreur lors de la r√©cup√©ration des labels : $($_.Exception.Message)"
    return $null
  }
}

function Invoke-Trello {
  param(
    [Parameter(Mandatory)][string]$Uri,
    [ValidateSet('GET','POST','PUT','DELETE')][string]$Method='GET',
    [hashtable]$Body
  )
  $p = @{}; $p.key = $Key; $p.token = $Token
  if ($Body) { foreach($k in $Body.Keys){ $p[$k] = $Body[$k] } }

  try {
    if ($Method -eq 'GET') {
      $qs = Join-QueryString $p
      $sep = '?'; if ($Uri -match '\?') { $sep = '&' }
      $full = "$Uri$sep$qs"
      Write-Verbose "Appel GET: $full"
      return Invoke-RestMethod -Method GET -Uri $full -ErrorAction Stop
    } else {
      Write-Verbose ("Appel {0}: {1}" -f $Method, $Uri)
      return Invoke-RestMethod -Method $Method -Uri $Uri -Body $p -ErrorAction Stop
    }
  } catch {
    # Affiche le d√©tail JSON renvoy√© par Trello si dispo
    try {
      if ($_.Exception.Response) {
        $respStream = $_.Exception.Response.GetResponseStream()
        $reader = New-Object System.IO.StreamReader($respStream)
        $body = $reader.ReadToEnd()
        Write-Warning "R√©ponse Trello: $body"
      }
    } catch {}
    
    $errorMsg = "Trello API error ($Method $Uri): $($_.Exception.Message)"
    if ($_.Exception.Response) {
      $errorMsg += " (HTTP $($_.Exception.Response.StatusCode))"
    }
    throw $errorMsg
  }
}

function Get-OrCreate-ListId {
  param([string]$BoardId,[string]$ListName)
  $baseUrl = "https://api.trello.com/1/boards/$BoardId/lists"
  $queryParams = "fields=name,id"
  $fullUrl = "$baseUrl`?$queryParams"
  $lists = Invoke-Trello $fullUrl
  $id = ($lists | Where-Object { $_.name -eq $ListName }).id
  if (-not $id) {
    $created = Invoke-Trello -Method POST -Uri "https://api.trello.com/1/lists" -Body @{ name=$ListName; idBoard=$BoardId; pos="top" }
    $id = $created.id
  }
  $id
}

function Get-OrCreate-LabelId {
  param([string]$BoardId,[string]$Name,[string]$Color)

  if ([string]::IsNullOrWhiteSpace($Name)) { return $null }
  
  # Nettoyer le nom du label
  $Name = $Name.Trim()
  if ([string]::IsNullOrWhiteSpace($Name)) { return $null }
  
  Write-Host "üéØ CR√âATION FORC√âE d'un nouveau label" -ForegroundColor Cyan
  Write-Host "Nom demand√©: '$Name'" -ForegroundColor White
  Write-Host "Couleur demand√©e: '$Color'" -ForegroundColor White
  
  # Nettoyer le nom (juste enlever les retours √† la ligne)
  $CleanName = $Name -replace '[\r\n]', ' '
  $CleanName = $CleanName.Trim()
  
  # Cr√©er le label avec VOTRE nom et VOTRE couleur
  try {
    if ($Color -eq "null") {
      # Sans couleur
      $lab = Invoke-Trello -Method POST -Uri "https://api.trello.com/1/labels" -Body @{ 
        name=$CleanName; 
        idBoard=$BoardId 
      }
      Write-Host "‚úÖ Label cr√©√© SANS couleur (ID: $($lab.id))" -ForegroundColor Green
    } else {
      # AVEC couleur
      $lab = Invoke-Trello -Method POST -Uri "https://api.trello.com/1/labels" -Body @{ 
        name=$CleanName; 
        color=$Color; 
        idBoard=$BoardId 
      }
      Write-Host "‚úÖ Label cr√©√© AVEC couleur '$Color' (ID: $($lab.id))" -ForegroundColor Green
    }
    
    Write-Host "  Nom dans Trello: '$($lab.name)'" -ForegroundColor Gray
    Write-Host "  Couleur dans Trello: '$($lab.color)'" -ForegroundColor Gray
    
    return $lab.id
    
  } catch {
    Write-Host "‚ùå √âCHEC de la cr√©ation du label" -ForegroundColor Red
    Write-Host "Erreur: $($_.Exception.Message)" -ForegroundColor Red
    
    # Si l'API refuse, proposer des solutions
    Write-Host "`nüîß SOLUTIONS :" -ForegroundColor Cyan
    Write-Host "1. Cr√©er le label MANUELLEMENT sur le board" -ForegroundColor White
    Write-Host "2. Utiliser un label existant" -ForegroundColor White
    Write-Host "3. Continuer sans label" -ForegroundColor White
    
    $choice = Read-Host "`nVotre choix (1/2/3)"
    
    if ($choice -eq "1") {
      Write-Host "`nüìã INSTRUCTIONS MANUELLES :" -ForegroundColor Cyan
      Write-Host "1. Ouvrez votre board Trello dans le navigateur" -ForegroundColor White
      Write-Host "2. Cliquez sur 'Afficher le menu' (3 points en haut √† droite)" -ForegroundColor White
      Write-Host "3. S√©lectionnez '√âtiquettes'" -ForegroundColor White
      Write-Host "4. Cliquez sur 'Cr√©er une nouvelle √©tiquette'" -ForegroundColor White
      Write-Host "5. Nom : '$CleanName'" -ForegroundColor White
      Write-Host "6. Couleur : $Color" -ForegroundColor White
      Write-Host "7. Cliquez sur 'Cr√©er'" -ForegroundColor White
      Write-Host "8. Relancez ce script apr√®s cr√©ation" -ForegroundColor White
      
      Write-Host "`nAppuyez sur Entr√©e pour quitter..." -ForegroundColor Cyan
      Read-Host
      exit 0
      
    } elseif ($choice -eq "2") {
      Write-Host "`nS√©lection d'un label existant..." -ForegroundColor Cyan
      $baseUrl = "https://api.trello.com/1/boards/$BoardId/labels"
      $limit = "limit=1000"
      $fields = "fields=id,name,color"
      $queryParams = "$limit" + "&" + "$fields"
      $fullUrl = "$baseUrl`?$queryParams"
      $labels = Invoke-Trello $fullUrl
      $labels | ForEach-Object { 
        $name = if ($_.name) { "'$($_.name)'" } else { "Sans nom" }
        Write-Host "ID: $($_.id) | Nom: $name | Couleur: $($_.color)" -ForegroundColor White
      }
      
      $selectedId = Read-Host "Entrez l'ID du label √† utiliser"
      $selectedLabel = $labels | Where-Object { $_.id -eq $selectedId } | Select-Object -First 1
      
      if ($selectedLabel) {
        Write-Host "‚úÖ Label s√©lectionn√© : $($selectedLabel.id)" -ForegroundColor Green
        return $selectedLabel.id
      } else {
        throw "ID de label invalide"
      }
      
    } else {
      Write-Host "‚úÖ Continuation sans label" -ForegroundColor Green
      return $null
    }
  }
}

function New-TrelloCard {
  param([string]$Title,[string]$Desc,[string]$ListId)
  Invoke-Trello -Method POST -Uri "https://api.trello.com/1/cards" -Body @{ name=$Title; desc=$Desc; idList=$ListId }
}

function Add-Checklist {
  param([string]$CardId,[string]$ChecklistName,[string[]]$Items)
  if (-not $Items -or $Items.Count -eq 0) { return }
  $cl = Invoke-Trello -Method POST -Uri "https://api.trello.com/1/cards/$CardId/checklists" -Body @{ name=$ChecklistName }
  foreach ($i in $Items) {
    Invoke-Trello -Method POST -Uri "https://api.trello.com/1/checklists/$($cl.id)/checkItems" -Body @{ name=$i } | Out-Null
  }
}

function Add-LabelToCard {
  param([string]$CardId,[string]$LabelId)
  if ([string]::IsNullOrWhiteSpace($LabelId)) { return }
  try {
    Invoke-Trello -Method POST -Uri "https://api.trello.com/1/cards/$CardId/idLabels" -Body @{ value=$LabelId } | Out-Null
    Write-Host "  üè∑Ô∏è Label appliqu√© √† la carte" -ForegroundColor Green
  } catch {
    Write-Warning "  ‚ö†Ô∏è Impossible d'appliquer le label: $($_.Exception.Message)"
  }
}

# Liste cible
$savedBoardConfig = Load-BoardConfig -BoardUrl $BoardUrl
if ($savedBoardConfig -and $savedBoardConfig.ListName) {
  Write-Host "Liste sauvegard√©e : $($savedBoardConfig.ListName)" -ForegroundColor Green
  $useSavedList = Read-Host "Utiliser cette liste ? (O/n)"
  if ($useSavedList -eq "" -or $useSavedList -eq "O" -or $useSavedList -eq "o") {
    $selectedList = @{ name = $savedBoardConfig.ListName; id = $null }
  } else {
    $selectedList = Select-ListFromBoard -BoardId $BoardId
  }
} else {
  $selectedList = Select-ListFromBoard -BoardId $BoardId
}

if (-not $selectedList) { throw "Aucune liste s√©lectionn√©e." }
$TargetListName = $selectedList.name

# Label (nom + couleur via menu)
if ($savedBoardConfig -and $savedBoardConfig.LabelName) {
  Write-Host "Label sauvegard√© : $($savedBoardConfig.LabelName) (couleur: $($savedBoardConfig.LabelColor))" -ForegroundColor Green
  $useSavedLabel = Read-Host "Utiliser ce label ? (O/n)"
  if ($useSavedLabel -eq "" -or $useSavedLabel -eq "O" -or $useSavedLabel -eq "o") {
    $selectedLabel = @{ name = $savedBoardConfig.LabelName; color = $savedBoardConfig.LabelColor; id = $null }
  } else {
    $selectedLabel = Select-LabelFromBoard -BoardId $BoardId
  }
} else {
  $selectedLabel = Select-LabelFromBoard -BoardId $BoardId
}

$LabelName = $null
$LabelColor = $null
if ($selectedLabel) {
  $LabelName = $selectedLabel.name
  $LabelColor = $selectedLabel.color
}

$SleepBetween = 0.35
$ChecklistName = "DoD"

# -------------------- ZONE √Ä MODIFIER : tes cartes --------------------
$Cards = @(
  @{
    title = "KPI par r√¥le (User/Tech/Manager/RH/Admin)"
    desc  = @"
Cette carte d√©finit les indicateurs affich√©s sur le dashboard en fonction du r√¥le. Pour l'Utilisateur : tickets ouverts, derniers documents, notifications non lues. Pour le Technicien : tickets assign√©s/en retard, MTTR/√¢ge moyen, √©quipements en panne. Pour le Manager : charge par technicien, SLA tenus, tendances mensuelles. Pour la RH : nouveaux comptes, comptes inactifs, √©v√©nements/planning. Pour l'Admin : sessions actives, erreurs syst√®me, licences proches d'expiration. Chaque KPI pr√©cise la d√©finition, la source de donn√©es, la p√©riode (jour/semaine/mois) et le mode d'actualisation afin de garantir une lecture fiable et comparable.
"@
    dod   = @(
      "Liste des KPI par r√¥le r√©dig√©e avec d√©finition, formule et p√©riode (doc /docs/dashboard/kpi-par-role.md).",
      "Source de donn√©es et requ√™tes identifi√©es pour chaque KPI (tables, vues, agr√©gations).",
      "Seuils/√©tats (OK/attention/critique) document√©s, avec l√©gende coh√©rente.",
      "Cas 'donn√©es vides' et 'erreur de chargement' pr√©vus avec messages clairs.",
      "Budget perf not√© (latence cible p95) et respect√© sur dataset d'essai.",
      "Validation PO/Stakeholders (par r√¥le) consign√©e avec exemples d'√©cran."
    )
  },
  @{
    title = "Graphes (tendances, r√©partitions)"
    desc  = @"
Cette carte sp√©cifie les visualisations principales du dashboard : courbes de tendance (tickets cr√©√©s/r√©solus, activit√© login), barres empil√©es (r√©partition par priorit√©, par site/r√©gion), camemberts/donut pour la part de cat√©gories, et cartes thermiques simples si n√©cessaire. Les axes, l√©gendes, unit√©s, p√©riodes de comparaison (N vs N-1) et r√®gles d'accessibilit√© (contraste, alternative textuelle) sont d√©finis. Le style visuel respecte les tokens glassmorphism sans nuire √† la lisibilit√©.
"@
    dod   = @(
      "Catalogue de graphes d√©fini (type, m√©trique, p√©riode, axes, l√©gendes) dans /docs/dashboard/graphs-spec.md.",
      "√âtats de chargement/vide/erreur mod√©lis√©s pour chaque graphique.",
      "R√®gles d'accessibilit√© document√©es (contraste, descriptions textuelles).",
      "Exemples comparatifs N vs N-1 ou rolling window pr√©cis√©s.",
      "Tests de performance (temps de rendu) et limites de points par graph fix√©s.",
      "Validation UX/PO sur lisibilit√© et coh√©rence visuelle."
    )
  },
  @{
    title = "Alertes (urgences, expirations, incidents)"
    desc  = @"
Cette carte d√©crit les alertes √† remonter sur le dashboard : tickets urgents (P0/P1) non pris en charge, licences arrivant √† expiration, √©quipements/agents offline au-del√† du seuil, erreurs syst√®me r√©centes. Chaque alerte pr√©cise son d√©clencheur, sa priorit√©, son destinataire potentiel et sa dur√©e de visibilit√©. Les messages doivent √™tre concis, actionnables (liens vers la vue concern√©e) et respecter le p√©rim√®tre de droits, pour √©viter toute divulgation d'informations sensibles.
"@
    dod   = @(
      "Table de r√®gles d'alertes r√©dig√©e (d√©clencheur, seuil, priorit√©, destinataires) /docs/dashboard/alerts.md.",
      "Affichage des alertes contextualis√© par r√¥le et p√©rim√®tre (RBAC respect√©).",
      "Lien d'action direct depuis l'alerte (ex.: ouvrir ticket, page licence).",
      "Gestion d'acknowledgement/masquage temporaire document√©e si applicable.",
      "Jeu d'essai couvrant urgences, expirations et incidents simul√©s.",
      "Validation Sec/PO (pas d'exposition d'infos hors p√©rim√®tre)."
    )
  },
  @{
    title = "Quick actions (contextuelles)"
    desc  = @"
Cette carte d√©finit la zone d'actions rapides du dashboard, adapt√©e au r√¥le et au contexte. Exemples : l'Utilisateur cr√©e un ticket, le Technicien ouvre sa file et planifie une intervention, le Manager g√©n√®re un rapport d'√©quipe, la RH ajoute un document/planning, l'Admin lance une sauvegarde ou acc√®de √† la configuration. Les actions doivent √™tre claires, limit√©es en nombre, prot√©g√©es par confirmation quand c'est sensible, et toujours conformes aux permissions effectives.
"@
    dod   = @(
      "Matrice des quick actions par r√¥le document√©e (/docs/dashboard/quick-actions.md) avec ic√¥nes et libell√©s.",
      "R√®gles de garde-fous (confirmations, restrictions) not√©es pour actions sensibles.",
      "Indisponibles non affich√©es (pas de bouton gris√© pour actions interdites).",
      "Parcours post-action (feedback/toast, redirection) d√©fini et coh√©rent.",
      "Tests E2E de pr√©sence/absence par r√¥le et v√©rification d'acc√®s c√¥t√© serveur.",
      "Validation UX/PO (clart√©, nombre raisonnable d'actions)."
    )
  },
  @{
    title = "Timeline activit√©s r√©centes"
    desc  = @"
Cette carte sp√©cifie la timeline d'activit√©s affich√©e sur le dashboard : connexions r√©centes, cr√©ations/√©ditions de tickets, attributions d'√©quipements, changements de licences (Admin), documents ajout√©s, notifications envoy√©es. Les √©v√©nements affich√©s respectent le p√©rim√®tre et la visibilit√© par r√¥le. La timeline pr√©voit des filtres de base (type, p√©riode), une pagination/chargement progressif et des libell√©s compr√©hensibles, avec liens vers les √©l√©ments d'origine.
"@
    dod   = @(
      "Sch√©ma des √©v√©nements et formatage des messages d√©fini (/docs/dashboard/timeline-spec.md).",
      "Filtres de base (type/p√©riode) + pagination/chargement progressif sp√©cifi√©s.",
      "RBAC appliqu√©: aucun √©v√©nement hors p√©rim√®tre affich√©.",
      "√âtats vide/erreur d√©finis avec messages standards.",
      "Exemples r√©dig√©s pour chaque type d'√©v√©nement avec liens de navigation.",
      "Validation PO/Tech sur pertinence et densit√© d'information."
    )
  }
)

# -------------------- Ex√©cution --------------------
Write-Host "`n=== V√âRIFICATION DE L'AUTHENTIFICATION ===" -ForegroundColor Cyan
Write-Host "KEY: $($Key.Substring(0,8) + '...')" -ForegroundColor Gray
Write-Host "TOKEN: $($Token.Substring(0,8) + '...')" -ForegroundColor Gray

try {
  Write-Host "`nV√©rification du compte‚Ä¶" -ForegroundColor Cyan
  $me = Invoke-Trello "https://api.trello.com/1/members/me"
  Write-Host ("‚úÖ Connect√© : {0} (@{1})" -f $me.fullName, $me.username) -ForegroundColor Green
  
  Write-Host "`n=== CR√âATION DES RESSOURCES ===" -ForegroundColor Cyan
  
  # Utiliser l'ID de liste d√©j√† r√©cup√©r√© ou le r√©cup√©rer
  if ($selectedList.id) {
    $listId = $selectedList.id
    Write-Host ("‚úÖ Liste: {0} ({1}) - ID r√©cup√©r√©" -f $TargetListName, $listId) -ForegroundColor Green
  } else {
    $listId = Get-OrCreate-ListId -BoardId $BoardId -ListName $TargetListName
    Write-Host ("‚úÖ Liste: {0} ({1}) - ID cr√©√©/r√©cup√©r√©" -f $TargetListName, $listId) -ForegroundColor Green
  }
  
  # Utiliser l'ID de label d√©j√† r√©cup√©r√© ou le cr√©er
  if ($selectedLabel -and $selectedLabel.id) {
    $labelId = $selectedLabel.id
    Write-Host ("‚úÖ Label: {0} ({1}) - ID r√©cup√©r√©" -f $LabelName, $labelId) -ForegroundColor Green
  } else {
    $labelId = Get-OrCreate-LabelId -BoardId $BoardId -Name $LabelName -Color $LabelColor
    if ($LabelName) { Write-Host ("‚úÖ Label: {0} ({1}) couleur={2} - ID cr√©√©" -f $LabelName, $labelId, $LabelColor) -ForegroundColor Green } else { Write-Host "Aucun label sp√©cifi√©" -ForegroundColor Gray }
  }
  
  Write-Host "`n=== CR√âATION DES CARTES ===" -ForegroundColor Cyan
  $created=@(); $errors=@(); $i=0; $n=$Cards.Count
  foreach ($c in $Cards) {
    $i++
    Write-Host ("[{0}/{1}] {2}" -f $i,$n,$c.title) -ForegroundColor Gray
    try {
      $card = New-TrelloCard -Title $c.title -Desc $c.desc -ListId $listId
      if ($labelId) {
        Add-LabelToCard -CardId $card.id -LabelId $labelId
      }
      Add-Checklist -CardId $card.id -ChecklistName $ChecklistName -Items $c.dod
      $created += [PSCustomObject]@{ Title=$c.title; Url=$card.shortUrl }
      Write-Host "  ‚úÖ Carte cr√©√©e" -ForegroundColor Green
    } catch {
      $errors  += [PSCustomObject]@{ Title=$c.title; Error=$_.ToString() }
      Write-Warning "  ‚ùå Erreur: $($_.Exception.Message)"
    }
    Start-Sleep -Seconds $SleepBetween
  }
  
  Write-Host "`n=== R√âCAP ===" -ForegroundColor Cyan
  Write-Host ("‚úÖ Cr√©√©es: {0} | ‚ùå Erreurs: {1}" -f $created.Count, $errors.Count) -ForegroundColor White
  
  if ($created.Count -gt 0) {
    Write-Host "`n--- CARTES CR√â√âES ---" -ForegroundColor Green
    $created | Format-Table -AutoSize Title, Url
  }
  
  if ($errors.Count -gt 0) {
    Write-Host "`n--- ERREURS ---" -ForegroundColor Red
    $errors | Format-Table -AutoSize Title, Error
  }
  
  # Sauvegarder la configuration du board
  $saveBoardConfig = Read-Host "`nSauvegarder la configuration de ce board pour la prochaine fois ? (O/n)"
  if ($saveBoardConfig -eq "" -or $saveBoardConfig -eq "O" -or $saveBoardConfig -eq "o") {
    Save-BoardConfig -BoardUrl $BoardUrl -ListName $TargetListName -LabelName $LabelName -LabelColor $LabelColor
  }
  
  Write-Host "`nüéâ Script termin√© avec succ√®s !" -ForegroundColor Green
  Write-Host "Appuyez sur Entr√©e pour continuer..." -ForegroundColor Cyan
  Read-Host
  
} catch {
  Write-Host "`n‚ùå ERREUR CRITIQUE : $($_.Exception.Message)" -ForegroundColor Red
  Write-Host "`nV√©rifiez que :" -ForegroundColor Yellow
  Write-Host "1. Votre KEY Trello est correcte" -ForegroundColor Yellow
  Write-Host "2. Votre TOKEN Trello est correcte" -ForegroundColor Yellow
  Write-Host "3. Vous avez acc√®s au board sp√©cifi√©" -ForegroundColor Yellow
  Write-Host "4. Votre connexion internet fonctionne" -ForegroundColor Yellow
  
  # Ne pas fermer PowerShell ISE, juste afficher l'erreur
  Write-Host "`nAppuyez sur Entr√©e pour continuer..." -ForegroundColor Cyan
  Read-Host
}
